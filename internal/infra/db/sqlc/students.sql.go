// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: students.sql

package pgstore

import (
	"context"

	"github.com/google/uuid"
)

const createStudent = `-- name: CreateStudent :exec
INSERT INTO students (
  id,
  name,
  email,
  password
) VALUES (
  $1,
  $2,
  $3,
  $4
)
`

type CreateStudentParams struct {
	ID       uuid.UUID `json:"id"`
	Name     string    `json:"name"`
	Email    string    `json:"email"`
	Password string    `json:"password"`
}

func (q *Queries) CreateStudent(ctx context.Context, arg CreateStudentParams) error {
	_, err := q.db.Exec(ctx, createStudent,
		arg.ID,
		arg.Name,
		arg.Email,
		arg.Password,
	)
	return err
}

const findByEmail = `-- name: FindByEmail :one
SELECT id, name, email, password, created_at, updated_at FROM students WHERE email = $1
`

func (q *Queries) FindByEmail(ctx context.Context, email string) (Student, error) {
	row := q.db.QueryRow(ctx, findByEmail, email)
	var i Student
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const findById = `-- name: FindById :one
SELECT id, name, email, password, created_at, updated_at FROM students WHERE id = $1
`

func (q *Queries) FindById(ctx context.Context, id uuid.UUID) (Student, error) {
	row := q.db.QueryRow(ctx, findById, id)
	var i Student
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateStudent = `-- name: UpdateStudent :exec
UPDATE students SET name = $2, email = $3, password = $4 WHERE id = $1
`

type UpdateStudentParams struct {
	ID       uuid.UUID `json:"id"`
	Name     string    `json:"name"`
	Email    string    `json:"email"`
	Password string    `json:"password"`
}

func (q *Queries) UpdateStudent(ctx context.Context, arg UpdateStudentParams) error {
	_, err := q.db.Exec(ctx, updateStudent,
		arg.ID,
		arg.Name,
		arg.Email,
		arg.Password,
	)
	return err
}
